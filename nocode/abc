# from flask import Flask, request, jsonify, render_template, redirect, url_for, session
# import psycopg2
# from werkzeug.security import generate_password_hash, check_password_hash
#
# # Initialize Flask app
# app = Flask(__name__)
#
# # Secret key for session management
# app.secret_key = 'your_secret_key_here'
#
# # Database connection details
# DB_HOST = 'localhost'
# DB_NAME = 'crud_db'
# DB_USER = 'postgres'
# DB_PASSWORD = '123'
#
# # Function to get database connection
# def get_db_connection():
#     conn = psycopg2.connect(
#         host=DB_HOST,
#         dbname=DB_NAME,
#         user=DB_USER,
#         password=DB_PASSWORD
#     )
#     return conn
#
# # Middleware to check if user is logged in
# @app.before_request
# def before_request():
#     # If the route is not login, login_form, or register, check if the user is logged in
#     if 'user_id' not in session and request.endpoint not in ['login', 'login_form', 'register', 'register_form']:
#         return redirect(url_for('login_form'))
#
# # Route to display login form
# @app.route('/login', methods=['GET'])
# def login_form():
#     return render_template('login.html')
#
# # Route to handle login logic
# @app.route('/login', methods=['POST'])
# def login():
#     email = request.form['email']
#     password = request.form['password']
#
#     conn = get_db_connection()
#     cur = conn.cursor()
#
#     # Check if the user exists
#     cur.execute('SELECT id, password FROM users WHERE email = %s', (email,))
#     user = cur.fetchone()
#
#     cur.close()
#     conn.close()
#
#     if user and check_password_hash(user[1], password):
#         session['user_id'] = user[0]  # Store user id in session
#         return redirect(url_for('view_users'))
#     else:
#         return redirect(url_for('login_form'))
#
# # Route to log out the user
# @app.route('/logout', methods=['GET'])
# def logout():
#     session.pop('user_id', None)  # Remove user_id from session
#     return redirect(url_for('login_form'))
#
# # Route to create a new user (with hashed password)
# @app.route('/users', methods=['POST'])
# def create_user():
#     data = request.get_json()
#     name = data['name']
#     email = data['email']
#     password = data['password']
#
#     # Hash the password before storing it
#     hashed_password = generate_password_hash(password, method='sha256')
#
#     conn = get_db_connection()
#     cur = conn.cursor()
#
#     # Insert the new user into the database
#     cur.execute('INSERT INTO users (name, email, password) VALUES (%s, %s, %s)', (name, email, hashed_password))
#     conn.commit()
#
#     cur.close()
#     conn.close()
#
#     return jsonify({"message": "User created successfully"}), 201
#
# # Route to get all users
# @app.route('/users', methods=['GET'])
# def get_users():
#     conn = get_db_connection()
#     cur = conn.cursor()
#
#     # Get all users from the database
#     cur.execute('SELECT id, name, email FROM users')
#     users = cur.fetchall()
#
#     cur.close()
#     conn.close()
#
#     # Return the list of users as JSON
#     users_list = [{"id": user[0], "name": user[1], "email": user[2]} for user in users]
#     return jsonify(users_list), 200
#
# # Route to get a user by ID
# @app.route('/users/<int:id>', methods=['GET'])
# def get_user(id):
#     conn = get_db_connection()
#     cur = conn.cursor()
#
#     # Get a user by their ID
#     cur.execute('SELECT id, name, email FROM users WHERE id = %s', (id,))
#     user = cur.fetchone()
#
#     cur.close()
#     conn.close()
#
#     if user:
#         return jsonify({"id": user[0], "name": user[1], "email": user[2]}), 200
#     else:
#         return jsonify({"message": "User not found"}), 404
#
# # Route to update a user's details
# @app.route('/users/<int:id>', methods=['PUT'])
# def update_user(id):
#     data = request.get_json()
#     name = data['name']
#     email = data['email']
#     password = data['password']
#
#     # Hash the new password
#     hashed_password = generate_password_hash(password, method='sha256')
#
#     conn = get_db_connection()
#     cur = conn.cursor()
#
#     # Update user details
#     cur.execute('UPDATE users SET name = %s, email = %s, password = %s WHERE id = %s',
#                 (name, email, hashed_password, id))
#     conn.commit()
#
#     cur.close()
#     conn.close()
#
#     return jsonify({"message": "User updated successfully"}), 200
#
# # Route to delete a user
# @app.route('/users/<int:id>', methods=['DELETE'])
# def delete_user(id):
#     conn = get_db_connection()
#     cur = conn.cursor()
#
#     # Delete the user
#     cur.execute('DELETE FROM users WHERE id = %s', (id,))
#     conn.commit()
#
#     cur.close()
#     conn.close()
#
#     return jsonify({"message": "User deleted successfully"}), 200
#
# # Route to view all users in HTML
# @app.route('/view_users', methods=['GET'])
# def view_users():
#     conn = get_db_connection()
#     cur = conn.cursor()
#
#     # Get all users from the database
#     cur.execute('SELECT id, name, email FROM users')
#     users = cur.fetchall()
#
#     cur.close()
#     conn.close()
#
#     # Render the users list in HTML
#     return render_template('users.html', users=users)
#
# # Route to create a new user in HTML form
# @app.route('/users/new', methods=['GET'])
# def new_user_form():
#     return render_template('create_user.html')
#
# # Route to handle user creation from the form
# @app.route('/users/new', methods=['POST'])
# def create_user_from_form():
#     name = request.form['name']
#     email = request.form['email']
#     password = request.form['password']
#
#     hashed_password = generate_password_hash(password, method='sha256')
#
#     conn = get_db_connection()
#     cur = conn.cursor()
#
#     # Insert the new user into the database
#     cur.execute('INSERT INTO users (name, email, password) VALUES (%s, %s, %s)', (name, email, hashed_password))
#     conn.commit()
#
#     cur.close()
#     conn.close()
#
#     return redirect(url_for('view_users'))
#
# # Route to edit a user in HTML form
# @app.route('/users/<int:id>/edit', methods=['GET'])
# def edit_user_form(id):
#     conn = get_db_connection()
#     cur = conn.cursor()
#
#     # Get the user by ID
#     cur.execute('SELECT id, name, email FROM users WHERE id = %s', (id,))
#     user = cur.fetchone()
#
#     cur.close()
#     conn.close()
#
#     if user:
#         return render_template('edit_user.html', user=user)
#     else:
#         return redirect(url_for('view_users'))
#
# # Route to handle user update from the form
# @app.route('/users/<int:id>/edit', methods=['POST'])
# def update_user_from_form(id):
#     name = request.form['name']
#     email = request.form['email']
#     password = request.form['password']
#
#     hashed_password = generate_password_hash(password, method='sha256')
#
#     conn = get_db_connection()
#     cur = conn.cursor()
#
#     # Update the user's details
#     cur.execute('UPDATE users SET name = %s, email = %s, password = %s WHERE id = %s',
#                 (name, email, hashed_password, id))
#     conn.commit()
#
#     cur.close()
#     conn.close()
#
#     return redirect(url_for('view_users'))
#
# # Route to delete a user from the HTML view
# @app.route('/users/<int:id>/delete', methods=['GET'])
# def delete_user_from_view(id):
#     conn = get_db_connection()
#     cur = conn.cursor()
#
#     # Delete the user by ID
#     cur.execute('DELETE FROM users WHERE id = %s', (id,))
#     conn.commit()
#
#     cur.close()
#     conn.close()
#
#     return redirect(url_for('view_users'))
#
# # Run the Flask app
# if __name__ == '__main__':
#     app.run(debug=True)
#